
<h2><a id="user-content-convert-models-from-ir-to-tensorflow-code-snippet" class="anchor" aria-hidden="true" href="#convert-models-from-ir-to-tensorflow-code-snippet"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Convert models from IR to Tensorflow code snippet</h2>
<p>The generated Tensorflow code snippet can restore weights from IR weights file directly, but we need the tensors' shape information to infer some parameters.</p>
<div class="highlight highlight-source-shell"><pre>$ mmtocode -f tensorflow --IRModelPath resnet152.pb --IRWeightPath resnet152.npy --dstModelPath tf_resnet152.py

Parse file [resnet152.pb] with binary format successfully.
Target network code snippet is saved as [tf_resnet152.py].</pre></div>
<p>You can refer the example tool to test your converted model. In this case we use the Tensorflow -&gt; IR -&gt; Tensorflow resnet_v2_152 model as an example.</p>
<div class="highlight highlight-source-shell"><pre>$ python -m mmdnn.conversion.examples.tensorflow.imagenet_test -s tf -p resnet -n tf_resnet152 -w resnet152.npy
<span class="pl-c1">.</span>
<span class="pl-c1">.</span>
<span class="pl-c1">.</span>
[(387, 14.552185), (102, 11.523594), (386, 7.2283654), (500, 4.6292458), (899, 2.8113561)]
Test model [resnet] from [tf] passed.</pre></div>
<p>The information shows that the output result of <strong>"Squeeze"</strong> layers from original slim model and converted model are same.</p>